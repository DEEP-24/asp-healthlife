generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator enums {
  provider = "tsx ./prisma/enum-generator.ts"
}

model User {
  id String @id @default(uuid())

  email     String @unique
  firstName String @map("first_name")
  lastName  String @map("last_name")
  password  String

  street     String
  city       String
  state      String
  zip        String   @db.VarChar(10)
  dob        DateTime
  phoneNo    String   @map("phone_number")
  speciality String?

  height String?
  weight String?

  role UserRole

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  recipe    Recipes[]

  patientAppointments Appointment[] @relation("PatientAppointments")
  doctorAppointments  Appointment[] @relation("DoctorAppointments")

  passwordResets PasswordReset[]

  availability  DoctorAvailability[]
  mealPlans     MealPlan[]
  healthMetrics HealthMetric[]

  @@map("user")
}

model PasswordReset {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  token String
  used  Boolean @default(false)

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId])
}

model Recipes {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  description String
  image       String
  price       Int
  cookingTime String @map("cooking_time")

  steps       Step[]
  ingredients Ingredient[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@map("recipes")
}

model Step {
  id       String  @id @default(uuid())
  order    Int
  content  String
  recipe   Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId String

  @@unique([recipeId, order])
}

model Ingredient {
  id       String @id @default(uuid())
  name     String
  quantity String

  recipe   Recipes @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipeId String
}

model Appointment {
  id        String            @id @default(uuid())
  date      DateTime
  startTime DateTime
  endTime   DateTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?
  mealPlan  MealPlan?

  patient   User   @relation("PatientAppointments", fields: [patientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  patientId String

  doctor   User   @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  doctorId String

  doctorNotes   String?
  healthMetrics HealthMetric[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model DoctorAvailability {
  id          String   @id @default(uuid())
  doctor      User     @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId    String
  dayOfWeek   Int
  startTime   DateTime
  endTime     DateTime
  isAvailable Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("doctor_availability")
}

model MealPlan {
  id        String   @id @default(cuid())
  plan      String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  meal Meal[]

  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique

  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

model Meal {
  id       String   @id @default(uuid())
  name     String
  type     MealType
  calories Int
  protein  Float
  carbs    Float
  fats     Float
  foods    String[]

  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  mealPlanId String

  @@map("meals")
}

model HealthMetric {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  appointmentId String

  waterIntake Float?
  calories    Int?
  notes       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("health_metrics")
}

enum UserRole {
  ADMIN
  USER
  DOCTOR
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}
